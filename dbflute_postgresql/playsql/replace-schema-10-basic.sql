
create table MEMBER
(
    MEMBER_ID serial NOT NULL primary key,
    MEMBER_NAME VARCHAR(200) NOT NULL,
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL,
    MEMBER_STATUS_CODE CHAR(3) NOT NULL,
    FORMALIZED_DATETIME timestamp(3),
    BIRTHDATE DATE,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    constraint UQ_MEMBER unique (MEMBER_ACCOUNT)
)  ;


create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID serial NOT NULL primary key,
    MEMBER_ID INTEGER NOT NULL,
    VALID_BEGIN_DATE DATE NOT NULL,
    VALID_END_DATE DATE NOT NULL,
    ADDRESS VARCHAR(200) NOT NULL,
    REGION_ID INTEGER NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    constraint UQ_MEMBER_ADDRESS unique (MEMBER_ID, VALID_BEGIN_DATE)
);


create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID bigserial NOT NULL primary key,
    MEMBER_ID INTEGER NOT NULL,
    LOGIN_DATETIME timestamp(3) NOT NULL,
    MOBILE_LOGIN_FLG INTEGER NOT NULL,
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL,
    constraint UQ_MEMBER_LOGIN unique (MEMBER_ID, LOGIN_DATETIME)
);


create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL primary key,
    LOGIN_PASSWORD VARCHAR(50) NOT NULL,
    REMINDER_QUESTION VARCHAR(50) NOT NULL,
    REMINDER_ANSWER VARCHAR(50) NOT NULL,
    REMINDER_USE_COUNT INTEGER NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL
);


create table MEMBER_SERVICE(
    MEMBER_SERVICE_ID serial NOT NULL primary key,
    MEMBER_ID INTEGER NOT NULL,
    SERVICE_POINT_COUNT INTEGER NOT NULL,
    SERVICE_RANK_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    constraint UQ_MEMBER_SERVICE unique (MEMBER_ID)
);


create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL primary key,
    WITHDRAWAL_REASON_CODE CHAR(3),
    WITHDRAWAL_REASON_INPUT_TEXT TEXT,
    WITHDRAWAL_DATETIME timestamp(3) NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL
);


create table PURCHASE(
    PURCHASE_ID bigserial NOT NULL primary key,
    MEMBER_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    PURCHASE_DATETIME timestamp(3) NOT NULL,
    PURCHASE_COUNT INTEGER NOT NULL,
    PURCHASE_PRICE INTEGER NOT NULL,
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    constraint UQ_PURCHASE unique (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME)
);


create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID bigserial NOT NULL primary key,
    PURCHASE_ID bigint NOT NULL,
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL,
    PAYMENT_DATETIME timestamp(3) NOT NULL,
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL
);


create table PRODUCT(
    PRODUCT_ID serial NOT NULL primary key,
    PRODUCT_NAME VARCHAR(50) NOT NULL,
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL,
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER NOT NULL,
    REGISTER_DATETIME timestamp(3) NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    REGISTER_PROCESS VARCHAR(200) NOT NULL,
    UPDATE_DATETIME timestamp(3) NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    UPDATE_PROCESS VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    constraint UQ_PRODUCT unique (PRODUCT_HANDLE_CODE)
);


create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL primary key,
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    constraint UQ_WITHDRAWAL_REASON_DISPLAY_ORDER unique (DISPLAY_ORDER)
);


create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL primary key,
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL,
    PARENT_CATEGORY_CODE CHAR(3)
);


create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL primary key,
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    constraint UQ_PRODUCT_STATUS_DISPLAY_ORDER unique (DISPLAY_ORDER)
);


create table REGION(
    REGION_ID INTEGER NOT NULL primary key,
    REGION_NAME VARCHAR(50) NOT NULL
);


create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL primary key,
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL,
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL,
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    constraint UQ_SERVICE_RANK_DISPLAY_ORDER unique (DISPLAY_ORDER)
);


create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL primary key,
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    constraint UQ_MEMBER_STATUS_DISPLAY_ORDER unique (DISPLAY_ORDER)
);


alter table MEMBER add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE) ;

alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID);

alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE) ;

alter table MEMBER_SECURITY add constraint FK_MEMBER_SC_INFO_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID);

alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE);

alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_INFO_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_INFO_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE) ;

alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references MEMBER (MEMBER_ID) ;

alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID) ;

alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID);

alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE);

alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE) ;

alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE);


create index IX_MEMBER_MEMBER_NAME on MEMBER(MEMBER_NAME);
create index IX_MEMBER_FORMALIZED_DATETIME on MEMBER(FORMALIZED_DATETIME);
create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME);
create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(SERVICE_POINT_COUNT);
create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME);
create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID);
create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE);
create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT);
create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME);
